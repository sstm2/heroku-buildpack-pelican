#!/usr/bin/env bash

# Fail fast and fail hard.
set -eo pipefail

echo "Arguments passed in $@"

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
CACHED_DIRS=".heroku"
WORKING_DIR=$(pwd)
echo "BIN_DIR: $BIN_DIR"
echo "ROOT_DIR: $ROOT_DIR"
echo "BUILD_DIR: $BUILD_DIR"

rm -fr $CACHE_DIR
mkdir -p $CACHE_DIR

# Versions.
PYTHON_VERSION="python-3.6.8"
PYTHON_STACK="cedar-14"
NGINX_VERSION="nginx-1.7.2"
PCRE_VERSION='pcre-8.36'
source $BIN_DIR/utils

mkdir -p $BUILD_DIR/local/sbin

if [[ ! -d "$CACHE_DIR/$PYTHON_VERSION" ]]; then
  cd $CACHE_DIR
  puts-step "Installing Python ($PYTHON_VERSION)"
  mkdir $PYTHON_VERSION
  curl https://lang-python.s3.amazonaws.com/$PYTHON_STACK/runtimes/$PYTHON_VERSION.tar.gz -s | tar zx -C $PYTHON_VERSION &> /dev/null
fi

# without setting a UTF-8 encoding, pip8 exposes a bug: https://github.com/multani/sonata/issues/72
export LANG=en_GB.utf-8

export PATH=$CACHE_DIR/$PYTHON_VERSION/bin:$PATH
export C_INCLUDE_PATH=$CACHE_DIR/$PYTHON_VERSION/include
export CPLUS_INCLUDE_PATH=$CACHE_DIR/$PYTHON_VERSION/include
export LIBRARY_PATH=$CACHE_DIR/$PYTHON_VERSION/lib
export LD_LIBRARY_PATH=$CACHE_DIR/$PYTHON_VERSION/lib

puts-step "Ensure pip"
python -m ensurepip --upgrade | indent

cd $BUILD_DIR

if [[ -f requirements.txt ]]; then
  puts-step "Installing dependencies using pip"
  python -m pip install --quiet -r requirements.txt | indent
else
  puts-step "Installing Pelican"
  python -m pip install --quiet pelican | indent

  puts-step "Installing Markdown"
  python -m pip install --quiet Markdown | indent
fi

puts-step "Running pelican"

if [[ -f publishconf.py ]]; then
  CONFIG_FILE="publishconf.py"
elif [[ -f pelicanconf.py ]]; then
  CONFIG_FILE="pelicanconf.py"
else
  puts-warn "A pelicanconf.py or publishconf.py file is required."
  exit 1
fi
pelican -d -o $BUILD_DIR/public -s $CONFIG_FILE $BUILD_DIR/content | indent

puts-step "Installing nginx ($STACK)"
mkdir -p "$1/bin/"
cp "bin/nginx-$STACK" "$1/bin/nginx"
nginx_version=$(./bin/nginx-$STACK -V 2>&1 | head -1 | awk '{ print $NF }')
puts-step "nginx-buildpack: Installed ${nginx_version} to app/bin"
cp bin/start-nginx "$1/bin/"
puts-step 'nginx-buildpack: Added start-nginx to app/bin'
cp bin/start-nginx-solo "$1/bin/"
puts-step 'nginx-buildpack: Added start-nginx-solo to app/bin'

mkdir -p "$1/config"

cp config/mime.types "$1/config/"
echo '-----> nginx-buildpack: Default mime.types copied to app/config/'

if [[ ! -f $1/config/nginx.conf.erb ]]; then
  cp config/nginx.conf.erb "$1/config/"
  echo '-----> nginx-buildpack: Default config copied to app/config.'
else
  echo '-----> nginx-buildpack: Custom config found in app/config.'
fi

exit 0
